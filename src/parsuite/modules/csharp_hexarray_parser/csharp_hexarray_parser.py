from parsuite.core.argument import Argument,DefaultArguments
from parsuite import helpers
from parsuite.core.suffix_printer import *
import argparse
import os
from re import findall

help = """Parse C# shellcode from payload files generated by
Metsploit or Cobalt Strike. Useful when embedding content
in other formats.
"""

args = [
    DefaultArguments.input_files,
    Argument('--max-len','-ml',
        type=int,
        default=75,
        help="""Maximum length of a given line after encoding."""),
    Argument('--detect-variable-name','-dvn',
        action='store_true',
        help="""Derive the variable name from the file name being
        parsed. The file name is extracted by parsing out the leading
        value that is separated from the rest of the file name by an
        underscire, .e.g 'x86_shellcode.cs' would yield the variable
        name of 'x86'."""),
    Argument('--disable-b64encode','-db64',
        action='store_true',
        help="""Base64 encode the shellcode prior to returning""")
]

def parse_file(infile):
    """Read all `0x00` formatted content from a file and return the
    hex content in comma separated and base64 encoded form."""

    # Read all the content from the file into a single string
    with open(infile) as infile: shellcode = infile.read()
    
    # Return as a comma separated and base64 encoded value
    return ','.join([t[0] for t in findall('(0x.{2})(, )?',shellcode)])

def parse(input_files=None, max_len=None,detect_variable_name=False,
        disable_b64encode=False, **kwargs):

    for input_file in input_files:

        if detect_variable_name:

            split = input_file.split('_')
            if len(split) < 2:
                raise ValueError("""If deriving the variable name from
                a file name, the file name must contain an underscore.
                The variable name will be extracted from the file name
                where the value is each character leading up to the
                underscore.""")
            else:
                vname = f'var {split[0]}='

        else:
            vname = ''

        shellcode = parse_file(input_file)

        if not disable_b64encode:
            shellcode = helpers.base64(shellcode) 

        if not shellcode:
            raise Exception(f"""Input file does not contain csharp
            shellcode: {input_file}""")

        shellcode = vname+'"'+'" +\n"'.join(
            helpers.len_split(shellcode,max_len
        ))+'";'

        print(shellcode)
